# Copyright Louis Dionne 2017
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt

language: cpp
sudo: false


matrix:
  include:
    # Clang 3.6
    - os: linux
      env: LLVM_VERSION=3.6.2
      addons: { apt: { packages: ["clang-3.6"], sources: ["llvm-toolchain-precise-3.6", "ubuntu-toolchain-r-test"] } }

    # Clang 3.7
    - os: linux
      env: LLVM_VERSION=3.7.1
      addons: { apt: { packages: ["clang-3.7"], sources: ["llvm-toolchain-precise-3.7", "ubuntu-toolchain-r-test"] } }

    # Clang 3.8
    - os: linux
      env: LLVM_VERSION=3.8.1
      addons: { apt: { packages: ["clang-3.8"], sources: ["llvm-toolchain-precise-3.8", "ubuntu-toolchain-r-test"] } }

    # Clang 3.9
    - os: linux
      env: LLVM_VERSION=3.9.0
      addons: { apt: { packages: ["clang-3.9"], sources: ["llvm-toolchain-precise-3.9", "ubuntu-toolchain-r-test"] } }

    # GCC 5
    - os: linux
      env: COMPILER=g++-5
      addons: { apt: { packages: ["g++-5"], sources: ["ubuntu-toolchain-r-test"] } }

    # GCC 6
    - os: linux
      env: COMPILER=g++-6
      addons: { apt: { packages: ["g++-6"], sources: ["ubuntu-toolchain-r-test"] } }

    # Xcode 7.3
    - os: osx
      osx_image: xcode7.3

    # Xcode 8
    - os: osx
      osx_image: xcode8


install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Pick up the overriden compiler if any
  ############################################################################
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - if [[ "${LLVM_VERSION}" != "" ]]; then export CXX="clang++-${LLVM_VERSION%.[0-9]}"; fi
  - ${CXX} --version

  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.8/cmake-3.8.0-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake || exit 1
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  ############################################################################
  # Install libc++ and libc++abi
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      LLVM_DIR=${DEPS_DIR}/llvm
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"

      mkdir -p ${LLVM_DIR} ${LLVM_DIR}/build ${LLVM_DIR}/projects/libcxx ${LLVM_DIR}/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR}
      travis_retry wget -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxx
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxxabi
      (cd ${LLVM_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR}/install)
      (cd ${LLVM_DIR}/build/projects/libcxx && make install -j2)
      (cd ${LLVM_DIR}/build/projects/libcxxabi && make install -j2)

      export CXXFLAGS="-isystem ${LLVM_DIR}/install/include/c++/v1"
      export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
    fi

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake ..)


script:
  - cmake --build build
  - (cd build && ctest --output-on-failure)
